/**
 * Copyright 2021 Francois Chabot
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let t=()=>{};const n=n=>{t=n};class s{constructor(t){this.t=[],this.i=t}get current(){return this.i}set(t){const n=this.i!==t;this.i=t,n&&this.notify()}toString(){return`${this.i}`}addListener(n){this.t.push(n),t((()=>{this.removeListener(n)}))}removeListener(t){this.t.splice(this.t.indexOf(t),1)}notify(){let t=this.t.length;for(;t--;)this.t[t](this.i)}}s.prototype.o=1;class e extends s{push(t){this.i.push(t),this.notify()}map(t){const n=n=>{const s=[],e=n.length;for(let r=0;r<e;++r)s.push(t(n[r],r,n));return s},s=new e(n(this.current));return this.addListener((t=>{s.i=n(t)})),s}}class r extends s{valueOf(){return this.i}}function i(t,n){c(t)&&t.addListener(n)}function o(t,n){if(c(n)){const s=u(t(n.current));return n.addListener((n=>s.set(t(n)))),s}return t(n)}function h(t){return c(t)?typeof t.current:typeof t}function u(t){return Array.isArray(t)?new e(t):new r(t)}function c(t){return null!==t&&"object"==typeof t&&!!t.o}export{u as dynamic,c as isDynamic,i as listen,n as setContextualCleanupHandler,o as transform,h as valType};
