{"version":3,"file":"probe-dynamics.js","sources":["../../src/Base.ts","../../src/List.ts","../../src/Value.ts","../../src/Operations.ts"],"sourcesContent":["/*\n * Copyright 2021 Francois Chabot\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicBase, CleanupOp } from './ApiTypes';\n\n//eslint-disable-next-line no-empty-function, @typescript-eslint/no-empty-function\nlet contextualCleanupHandler: (op: CleanupOp) => void = () => {};\n\nexport const setContextualCleanupHandler = (handler: (op: CleanupOp) => void): void => {\n    contextualCleanupHandler = handler;\n};\n\nexport class DynamicBaseImpl<T> implements DynamicBase<T> {\n    protected _value: T;\n    protected _listeners: ((v: T) => void)[] = [];\n\n    constructor(initVal: T) {\n        this._value = initVal;\n    }\n\n    get current(): T {\n        return this._value;\n    }\n\n    set(v: T): void {\n        const notif = this._value !== v;\n        this._value = v;\n        if (notif) {\n            this.notify();\n        }\n    }\n\n    toString(): string {\n        return `${this._value}`;\n    }\n\n    addListener(lst: (v: T) => void): void {\n        this._listeners.push(lst);\n\n        contextualCleanupHandler(() => {\n            this.removeListener(lst);\n        });\n    }\n\n    removeListener(lst: (v: T) => void): void {\n        this._listeners.splice(this._listeners.indexOf(lst), 1);\n    }\n\n    notify(): void {\n        let len = this._listeners.length;\n        while (len--) {\n            this._listeners[len](this._value);\n        }\n    }\n\n    _probed_dyntype?: number; // Will be set in the prototype.\n}\nDynamicBaseImpl.prototype._probed_dyntype = 1;\n","/*\n * Copyright 2021 Francois Chabot\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicBaseImpl } from './Base';\nimport { ListValueType, DynamicList } from './ApiTypes';\n\nexport class DynamicListImpl<T extends Array<unknown>> extends DynamicBaseImpl<T> implements DynamicList<T> {\n    push(v: ListValueType<T>): void {\n        this._value.push(v);\n        this.notify();\n    }\n\n    map<U>(cb: (value: ListValueType<T>, index: number, array: T) => U): DynamicList<U[]> {\n        const regenerate = (newArray: T): U[] => {\n            // For loop instead of map, because this is confusing TypeScript.\n            const result: U[] = [];\n            const len = newArray.length;\n            for (let i = 0; i < len; ++i) {\n                result.push(cb(newArray[i], i, newArray));\n            }\n            return result;\n        };\n\n        const result = new DynamicListImpl<U[]>(regenerate(this.current));\n\n        this.addListener((v) => {\n            result._value = regenerate(v);\n        });\n        return result;\n    }\n}\n","/*\n * Copyright 2021 Francois Chabot\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DynamicValue } from './ApiTypes';\nimport { DynamicBaseImpl } from './Base';\n\nexport class DynamicValueImpl<T> extends DynamicBaseImpl<T> implements DynamicValue<T> {\n    valueOf(): T {\n        return this._value;\n    }\n}\n","/*\n * Copyright 2021 Francois Chabot\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicList, DynamicReaderBase, DynamicValue, Reader, DynamicReader } from './ApiTypes';\nimport { DynamicBaseImpl } from './Base';\nimport { DynamicListImpl } from './List';\nimport { DynamicValueImpl } from './Value';\n\nexport function listen<T>(v: T | DynamicReaderBase<T>, cb: (v: T) => void): void {\n    if (isDynamic(v)) {\n        v.addListener(cb);\n    }\n}\n\nexport function transform<T, U>(cb: (v: T) => U, v: DynamicReaderBase<T>): DynamicReader<U>;\nexport function transform<T, U>(cb: (v: T) => U, v: T): U;\nexport function transform<T, U>(cb: (v: T) => U, v: T | DynamicReaderBase<T>): Reader<U> {\n    if (isDynamic(v)) {\n        const result = dynamic(cb(v.current));\n\n        v.addListener((newVal) => result.set(cb(newVal)));\n\n        return result;\n    } else {\n        return cb(v);\n    }\n}\n\nexport function valType<T>(v: Reader<T>): string {\n    if (isDynamic(v)) {\n        return typeof v.current;\n    } else {\n        return typeof v;\n    }\n}\n\nexport function dynamic<T>(init: T[]): DynamicList<T[]>;\nexport function dynamic<T>(init: T): DynamicValue<T>;\n\nexport function dynamic<T>(init: T): DynamicValue<T> | DynamicList<T & unknown[]> {\n    if (Array.isArray(init)) {\n        return new DynamicListImpl<T & unknown[]>(init);\n    }\n    return new DynamicValueImpl(init);\n}\n\nexport function isDynamic<T>(val: T | DynamicReader<T>): val is DynamicReader<T> {\n    return val !== null && typeof val === 'object' && !!((val as unknown) as DynamicBaseImpl<T>)._probed_dyntype;\n}\n"],"names":[],"mappings":"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"}